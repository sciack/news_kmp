# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: News KMP release pipeline
on:
  push:
    tags:
      - '*'
permissions:
  contents: read

env:
  BUILD_NUMBER: ${{github.run_number}}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      checks: write
      pull-requests: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
        fetch-depth: 0
      - name: release
        uses: "marvinpinto/action-automatic-releases@latest"
        id: create_release
        with:
          repo_token: ${{ github.token }}
          prerelease: false

  linux:
    runs-on: ubuntu-latest
    needs:
      - release
    permissions:
      contents: write
      issues: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: test
      - name: "Build retrieve the version"
        run: |
          ./gradlew versionEnv 
          # export the variable in the file as pipeline env
          cat version.env >> "$GITHUB_ENV"
          git clean -fd
      - name: Install rpm
        uses: ConorMacBride/install-package@v1
        with:
          apt: rpm
      - name: Build release
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: packageDistributionForCurrentOs
      - name: upload linux artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: desktopApp/build/compose/binaries/main/rpm/News-${{ env.RPM_VERSION }}-1.x86_64.rpm
          asset_name: News-${{ env.RPM_VERSION  }}-1.x86_64.rpm
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/compose/binaries/main/rpm/*

  mac:
    runs-on: macos-latest
    needs:
      - release
    permissions:
      contents: write
      issues: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: show java version
        run: java --version
      - name: make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew packageDistributionForCurrentOs

      - name: upload mac artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: desktopApp/build/compose/binaries/main/dmg/News-${{ env.APP_VERSION_NAME }}.dmg
          asset_name: News-${{ github.ref_name }}.dmg
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}

  windows:
    runs-on: windows-latest
    needs:
      - release
    permissions:
      contents: write
      issues: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: show java version
        run: java --version
      - name: package
        run: ./gradlew packageDistributionForCurrentOs -i
      - name: upload windows artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: desktopApp/build/compose/binaries/main/msi/News-${{ env.APP_VERSION_NAME }}.msi
          asset_name: News-${{ github.ref_name }}.msi
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ github.token }}

  android:
    runs-on: ubuntu-latest
    needs:
      - release
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: "Build retrieve the version"
        run: |
          ./gradlew versionEnv 
          # export the variable in the file as pipeline env
          cat version.env >> "$GITHUB_ENV"
          git clean -fd
      - name: "Credentials"
        run: |
          echo "${{ secrets.KNEWS_ACCOUNT_JSON_KEY}}" |base64 -d > google_account_key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$PWD/google_account_key.json" >> "$GITHUB_ENV"
      - name: "Push release"
        run: ./gradlew assembleRelease appDistributionUploadRelease

  deploy_ios:
    runs-on: macos-latest
    needs:
      - release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: "Setup Gradle"
        uses: gradle/gradle-build-action@v2
      - name: "Setup xcode"
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: "Build retrieve the version"
        run: |
          ./gradlew versionEnv 
          # export the variable in the file as pipeline env
          cat version.env >> "$GITHUB_ENV"
          git clean -fd
      - name: "Setup app version"
        uses: yanamura/ios-bump-version@v1
        with:
          version: ${{ env.APP_VERSION_NAME }}
          build-number: ${{ env.APP_VERSION_CODE }}
          project-path: iosApp
      - name: "Build iOS App"
        uses: yukiarrr/ios-build-action@v1.9.1
        with:
          project-path: iosApp/iosApp.xcodeproj
          p12-base64: ${{ secrets.APPLE_DEV_P12_CERT_B64 }}
          mobileprovision-base64: ${{ secrets.KNEWS_APP_PROFILE }}
          code-signing-identity: "iPhone Distribution: Zuehlke Engineering AG (33AUWD68J4)"
          team-id: ${{ secrets.ZUHLKE_IOS_TEAM_ID }}
          certificate-password: ${{ secrets.APPLE_DEV_CERT_PASSWORD }}
          #export-options: iosApp/exportOptionsRelease.plist
          export-method: "app-store"
      - name: "Upload IPA file as artifact"
        uses: actions/upload-artifact@v3
        with:
          name: "KNews App IPA"
          path: "output.ipa"
      - name: Install private API key P8
        env:
          PRIVATE_API_KEY_BASE64: ${{ secrets.KNEWS_IOS_APPSTORE_API_PRIVATE_KEY }}
          API_KEY: ${{ secrets.KNEWS_IOS_APPSTORE_API_KEY_ID }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8
      - name: "Upload IPA file to TestFlight"
        env:
          API_KEY: ${{ secrets.KNEWS_IOS_APPSTORE_API_KEY_ID }}
          API_ISSUER: ${{ secrets.KNEWS_IOS_APPSTORE_ISSUER_ID  }}
        run: xcrun altool --output-format xml --upload-app -f output.ipa -t ios --apiKey $API_KEY --apiIssuer $API_ISSUER